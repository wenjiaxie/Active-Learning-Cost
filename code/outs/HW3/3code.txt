//---------------------------------------------------------------
//map class
//---------------------------------------------------------------

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class Map extends Mapper<LongWritable, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();
 
        public void map(LongWritable key, Text value, Context context)  {
        	
        	 String lineinput = value.toString();

            ArrayList<String> linArr = (ArrayList<String>) Arrays.asList(lineinput.split(","));
            int age = Integer.valueOf(linArr.get(1));
            String group = null;
            
             group = getgroup(age);
            
            word.set(group);
            try {
				context.write(word, one);
			} catch (IOException | InterruptedException e) {
				// TODO Auto-generated catch block
				System.out.println("context writing failed");
			}
        }
        
        private String getgroup(int age)
        {
        	
        	String group = null;
        	
        	if (age >= 5 && age <= 14) {
        		group = "a";
            } 
        	if (age >= 15 && age <= 24) {
            	group = "b";
            } 
        	if (age >= 25 && age <= 34) {
            	group = "c";
            } 
        	if (age >= 35 && age <= 44) {
            	group = "d";
            } 
        	if (age >= 45 && age <= 54) {
            	group = "e";
            } 
        	if (age >= 55) {
            	group = "f";
            }
        	
        	return group;
        	
        }
    } 

//---------------------------------------------------------------
//reduce class
//---------------------------------------------------------------

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;

 public class Deduction extends Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) {
            int sum = 0;
            for (IntWritable val : values) {
            	sum += val.get();
            }
            try {
				context.write(key, new IntWritable(sum));
			} catch (IOException | InterruptedException e) {
				// TODO Auto-generated catch block
				System.out.println("context write failed");
			}
        }
    }


//---------------------------------------------------------------
//main class
//---------------------------------------------------------------

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;



public class HW3_Question3

{

 @SuppressWarnings("deprecation")
 public static void main(String[] args) {
     Configuration conf = new Configuration();

     Job job = null;
	try {
		job = new Job(conf, "Question 3");
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
     job.setJarByClass(HW3_Question3.class);
     job.setOutputKeyClass(Text.class);
     job.setOutputValueClass(IntWritable.class);

     job.setMapperClass(Map.class);
     job.setCombinerClass(Deduction.class);
     job.setReducerClass(Deduction.class);

     job.setInputFormatClass(TextInputFormat.class);
     job.setOutputFormatClass(TextOutputFormat.class);

     try {
		FileInputFormat.addInputPath(job, new Path(args[0]));
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
     FileOutputFormat.setOutputPath(job, new Path(args[1]));

     try {
		job.waitForCompletion(true);
	} catch (ClassNotFoundException | IOException | InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
 } 
}