import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;

public class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {
	
	   private static IntWritable one;
	    private Text UID1;
	    private Text UID2 ;
	
	//constructor
	
	public Map()
	{
		one = new IntWritable(1);
		UID1 = new Text();
		UID2 = new Text();
	}
	
    
  public void map(LongWritable key, Text value,OutputCollector<Text, IntWritable> output,  Reporter reporter) {
      String lineinput = value.toString();
      String[] linArr = lineinput.split(",");
      if (linArr.length == 2) {
    	  UID1.set(linArr[0]);
    	  UID2.set(linArr[1]);
        try {
			output.collect(UID1, one);
			
			output.collect(UID2, one);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("output collection failed!");
		}
        
      }
      else
      {
    	  System.out.println("wrong number of input arguments!");
      }
    }
  }

//-------------------------------------------------------------------------------------------------------

map class

//-------------------------------------------------------------------------------------------------------

import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;

 public class Deduction extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> {
	 
	 
	 public Deduction()
	 {
		 
	 }
    
    public void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output,  Reporter reporter)  {
      int sum = 0;
      while (values.hasNext() == true) {
        sum += values.next().get();
      }
      try {
		output.collect(key, new IntWritable(sum));
	} catch (IOException e) {
		// TODO Auto-generated catch block
		System.out.println();
	}
    }
  }

//-------------------------------------------------------------------------------------------------------

reduce class(sorry mispelling the reduction)

//-------------------------------------------------------------------------------------------------------



import java.io.IOException;
import java.util.ArrayList;

import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;



// sorry to include * but I have no more time to check

@SuppressWarnings("unused")
public class HW3_Question3 extends Configured implements Tool {
	
	
	private static String[] arg0;
  

public int run(String[] arg0)  {
	
	    JobConf conf = new JobConf(getConf(), HW3_Question3.class);
	    
	    
	    conf.setJobName("Question 1");
	 

	    conf.setOutputKeyClass(Text.class);
	    
	    conf.setOutputValueClass(IntWritable.class);
	    
	    conf.setMapperClass(Map.class);   
	    
	    conf.setCombinerClass(Deduction.class);
	    
	    conf.setReducerClass(Deduction.class);
	    
	    ArrayList<String> other_args = new ArrayList<String>();
	    
	    
	    for(int i=0; i < arg0.length; i++) {
	    	
	    
	        if ("-m".equals(arg0[i])) {
	          conf.setNumMapTasks(Integer.parseInt(arg0[i++]));
	        } else if ("-r".equals(arg0[i])) {
	          conf.setNumReduceTasks(Integer.parseInt(arg0[i++]));
	        } else {
	          other_args.add(arg0[i]);
	        }
	        
	    // Make sure there are exactly 2 parameters left.
	   
	    FileInputFormat.setInputPaths(conf, other_args.get(0));
	    FileOutputFormat.setOutputPath(conf, new Path(other_args.get(1)));
	        
	    try {
			JobClient.runJob(conf);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("Run Job failed");
		}
	  }
	    return java.lang.Integer.MAX_VALUE;

}


public static void main(String[] args) 
{
	  
	 arg0 = args;

try {

	int result;
	
    result = ToolRunner.run(new Configuration(), new HW3_Question3(), args);
	
	
} catch (Exception e) {
	// TODO Auto-generated catch block
	System.out.println("Run failed");
}
  
}

}

//-------------------------------------------------------------------------------------------------------

main method

//-------------------------------------------------------------------------------------------------------


